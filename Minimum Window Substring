'''
Given two strings s and t of lengths m and n respectively, return the minimum window 
substring
 of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
 

Constraints:

m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of uppercase and lowercase English letters.
 

Follow up: Could you find an algorithm that runs in O(m + n) time?
'''

class Solution(object):
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        #Base case
        if t == "":
            return ""

        #Create two heapmaps
        countT, window = {}, {}

        #Saving the elements of t into heapmap
        for c in t:
            countT[c] = 1 + countT.get(c, 0)

        #This two variables save the number of letters that the algorithm current have and 
        #the number of letters that need to be achieve.  
        have, need = 0, len(countT)

        #The res variable save the start point and end point of the solution window. 
        #The resLen varible save the length of the solution window
        res, resLen = [-1, -1], float("infinity")
        
        #Initialize the left pointer
        l = 0
        #This loop pass throught all the input
        for r in range(len(s)):
            c = s[r]
            #Refresh the size of the window
            window[c] = 1 + window.get(c, 0)

            #If a element of t was found and the quantity is the same of the t string, then
            #increse the have variable
            if c in countT and window[c] == countT[c]:
                have += 1

            #This loops pop elements from left to descrease the size of the window
            while have == need:
                # update our result
                if (r - l + 1) < resLen:
                    res = [l, r]
                    resLen = r - l + 1
                # pop from the left of our window
                window[s[l]] -= 1
                if s[l] in countT and window[s[l]] < countT[s[l]]:
                    have -= 1
                l += 1
        #Saving answer
        l, r = res
        #Return a solution
        return s[l : r + 1] if resLen != float("infinity") else ""
